// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package acoremodrandomsuffix

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// ECMeleeStrDPS is a EnchantCategory of type MeleeStrDPS.
	ECMeleeStrDPS EnchantCategory = iota
	// ECMeleeStrTank is a EnchantCategory of type MeleeStrTank.
	ECMeleeStrTank
	// ECMeleeAgiDPS is a EnchantCategory of type MeleeAgiDPS.
	ECMeleeAgiDPS
	// ECMeleeAgiTank is a EnchantCategory of type MeleeAgiTank.
	ECMeleeAgiTank
	// ECRangedAgi is a EnchantCategory of type RangedAgi.
	ECRangedAgi
	// ECCaster is a EnchantCategory of type Caster.
	ECCaster
)

var ErrInvalidEnchantCategory = fmt.Errorf("not a valid EnchantCategory, try [%s]", strings.Join(_EnchantCategoryNames, ", "))

const _EnchantCategoryName = "MeleeStrDPSMeleeStrTankMeleeAgiDPSMeleeAgiTankRangedAgiCaster"

var _EnchantCategoryNames = []string{
	_EnchantCategoryName[0:11],
	_EnchantCategoryName[11:23],
	_EnchantCategoryName[23:34],
	_EnchantCategoryName[34:46],
	_EnchantCategoryName[46:55],
	_EnchantCategoryName[55:61],
}

// EnchantCategoryNames returns a list of possible string values of EnchantCategory.
func EnchantCategoryNames() []string {
	tmp := make([]string, len(_EnchantCategoryNames))
	copy(tmp, _EnchantCategoryNames)
	return tmp
}

var _EnchantCategoryMap = map[EnchantCategory]string{
	ECMeleeStrDPS:  _EnchantCategoryName[0:11],
	ECMeleeStrTank: _EnchantCategoryName[11:23],
	ECMeleeAgiDPS:  _EnchantCategoryName[23:34],
	ECMeleeAgiTank: _EnchantCategoryName[34:46],
	ECRangedAgi:    _EnchantCategoryName[46:55],
	ECCaster:       _EnchantCategoryName[55:61],
}

// String implements the Stringer interface.
func (x EnchantCategory) String() string {
	if str, ok := _EnchantCategoryMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EnchantCategory(%d)", x)
}

var _EnchantCategoryValue = map[string]EnchantCategory{
	_EnchantCategoryName[0:11]:  ECMeleeStrDPS,
	_EnchantCategoryName[11:23]: ECMeleeStrTank,
	_EnchantCategoryName[23:34]: ECMeleeAgiDPS,
	_EnchantCategoryName[34:46]: ECMeleeAgiTank,
	_EnchantCategoryName[46:55]: ECRangedAgi,
	_EnchantCategoryName[55:61]: ECCaster,
}

// ParseEnchantCategory attempts to convert a string to a EnchantCategory.
func ParseEnchantCategory(name string) (EnchantCategory, error) {
	if x, ok := _EnchantCategoryValue[name]; ok {
		return x, nil
	}
	return EnchantCategory(0), fmt.Errorf("%s is %w", name, ErrInvalidEnchantCategory)
}

// MarshalText implements the text marshaller method.
func (x EnchantCategory) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EnchantCategory) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEnchantCategory(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errEnchantCategoryNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *EnchantCategory) Scan(value interface{}) (err error) {
	if value == nil {
		*x = EnchantCategory(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = EnchantCategory(v)
	case string:
		*x, err = ParseEnchantCategory(v)
	case []byte:
		*x, err = ParseEnchantCategory(string(v))
	case EnchantCategory:
		*x = v
	case int:
		*x = EnchantCategory(v)
	case *EnchantCategory:
		if v == nil {
			return errEnchantCategoryNilPtr
		}
		*x = *v
	case uint:
		*x = EnchantCategory(v)
	case uint64:
		*x = EnchantCategory(v)
	case *int:
		if v == nil {
			return errEnchantCategoryNilPtr
		}
		*x = EnchantCategory(*v)
	case *int64:
		if v == nil {
			return errEnchantCategoryNilPtr
		}
		*x = EnchantCategory(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = EnchantCategory(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errEnchantCategoryNilPtr
		}
		*x = EnchantCategory(*v)
	case *uint:
		if v == nil {
			return errEnchantCategoryNilPtr
		}
		*x = EnchantCategory(*v)
	case *uint64:
		if v == nil {
			return errEnchantCategoryNilPtr
		}
		*x = EnchantCategory(*v)
	case *string:
		if v == nil {
			return errEnchantCategoryNilPtr
		}
		*x, err = ParseEnchantCategory(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x EnchantCategory) Value() (driver.Value, error) {
	return x.String(), nil
}
