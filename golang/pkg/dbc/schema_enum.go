// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package dbc

import (
	"database/sql/driver"
	"fmt"
	"strings"

	"github.com/pkg/errors"
)

const (
	// DBCSchemaFieldInt32 is a DBCSchemaFieldType of type Int32.
	DBCSchemaFieldInt32 DBCSchemaFieldType = iota
	// DBCSchemaFieldUint8 is a DBCSchemaFieldType of type Uint8.
	DBCSchemaFieldUint8
	// DBCSchemaFieldUint32 is a DBCSchemaFieldType of type Uint32.
	DBCSchemaFieldUint32
	// DBCSchemaFieldFloat32 is a DBCSchemaFieldType of type Float32.
	DBCSchemaFieldFloat32
	// DBCSchemaFieldFloat64 is a DBCSchemaFieldType of type Float64.
	// float64 is a double value
	DBCSchemaFieldFloat64
	// DBCSchemaFieldStringOffset is a DBCSchemaFieldType of type String_offset.
	DBCSchemaFieldStringOffset
	// DBCSchemaFieldUnknown is a DBCSchemaFieldType of type Unknown.
	DBCSchemaFieldUnknown
)

var ErrInvalidDBCSchemaFieldType = fmt.Errorf("not a valid DBCSchemaFieldType, try [%s]", strings.Join(_DBCSchemaFieldTypeNames, ", "))

const _DBCSchemaFieldTypeName = "int32uint8uint32float32float64string_offsetunknown"

var _DBCSchemaFieldTypeNames = []string{
	_DBCSchemaFieldTypeName[0:5],
	_DBCSchemaFieldTypeName[5:10],
	_DBCSchemaFieldTypeName[10:16],
	_DBCSchemaFieldTypeName[16:23],
	_DBCSchemaFieldTypeName[23:30],
	_DBCSchemaFieldTypeName[30:43],
	_DBCSchemaFieldTypeName[43:50],
}

// DBCSchemaFieldTypeNames returns a list of possible string values of DBCSchemaFieldType.
func DBCSchemaFieldTypeNames() []string {
	tmp := make([]string, len(_DBCSchemaFieldTypeNames))
	copy(tmp, _DBCSchemaFieldTypeNames)
	return tmp
}

var _DBCSchemaFieldTypeMap = map[DBCSchemaFieldType]string{
	DBCSchemaFieldInt32:        _DBCSchemaFieldTypeName[0:5],
	DBCSchemaFieldUint8:        _DBCSchemaFieldTypeName[5:10],
	DBCSchemaFieldUint32:       _DBCSchemaFieldTypeName[10:16],
	DBCSchemaFieldFloat32:      _DBCSchemaFieldTypeName[16:23],
	DBCSchemaFieldFloat64:      _DBCSchemaFieldTypeName[23:30],
	DBCSchemaFieldStringOffset: _DBCSchemaFieldTypeName[30:43],
	DBCSchemaFieldUnknown:      _DBCSchemaFieldTypeName[43:50],
}

// String implements the Stringer interface.
func (x DBCSchemaFieldType) String() string {
	if str, ok := _DBCSchemaFieldTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DBCSchemaFieldType(%d)", x)
}

var _DBCSchemaFieldTypeValue = map[string]DBCSchemaFieldType{
	_DBCSchemaFieldTypeName[0:5]:   DBCSchemaFieldInt32,
	_DBCSchemaFieldTypeName[5:10]:  DBCSchemaFieldUint8,
	_DBCSchemaFieldTypeName[10:16]: DBCSchemaFieldUint32,
	_DBCSchemaFieldTypeName[16:23]: DBCSchemaFieldFloat32,
	_DBCSchemaFieldTypeName[23:30]: DBCSchemaFieldFloat64,
	_DBCSchemaFieldTypeName[30:43]: DBCSchemaFieldStringOffset,
	_DBCSchemaFieldTypeName[43:50]: DBCSchemaFieldUnknown,
}

// ParseDBCSchemaFieldType attempts to convert a string to a DBCSchemaFieldType.
func ParseDBCSchemaFieldType(name string) (DBCSchemaFieldType, error) {
	if x, ok := _DBCSchemaFieldTypeValue[name]; ok {
		return x, nil
	}
	return DBCSchemaFieldType(0), fmt.Errorf("%s is %w", name, ErrInvalidDBCSchemaFieldType)
}

// MarshalText implements the text marshaller method.
func (x DBCSchemaFieldType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *DBCSchemaFieldType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDBCSchemaFieldType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errDBCSchemaFieldTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *DBCSchemaFieldType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = DBCSchemaFieldType(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = DBCSchemaFieldType(v)
	case string:
		*x, err = ParseDBCSchemaFieldType(v)
	case []byte:
		*x, err = ParseDBCSchemaFieldType(string(v))
	case DBCSchemaFieldType:
		*x = v
	case int:
		*x = DBCSchemaFieldType(v)
	case *DBCSchemaFieldType:
		if v == nil {
			return errDBCSchemaFieldTypeNilPtr
		}
		*x = *v
	case uint:
		*x = DBCSchemaFieldType(v)
	case uint64:
		*x = DBCSchemaFieldType(v)
	case *int:
		if v == nil {
			return errDBCSchemaFieldTypeNilPtr
		}
		*x = DBCSchemaFieldType(*v)
	case *int64:
		if v == nil {
			return errDBCSchemaFieldTypeNilPtr
		}
		*x = DBCSchemaFieldType(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = DBCSchemaFieldType(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errDBCSchemaFieldTypeNilPtr
		}
		*x = DBCSchemaFieldType(*v)
	case *uint:
		if v == nil {
			return errDBCSchemaFieldTypeNilPtr
		}
		*x = DBCSchemaFieldType(*v)
	case *uint64:
		if v == nil {
			return errDBCSchemaFieldTypeNilPtr
		}
		*x = DBCSchemaFieldType(*v)
	case *string:
		if v == nil {
			return errDBCSchemaFieldTypeNilPtr
		}
		*x, err = ParseDBCSchemaFieldType(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x DBCSchemaFieldType) Value() (driver.Value, error) {
	return x.String(), nil
}
